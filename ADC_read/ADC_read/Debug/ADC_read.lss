
ADC_read.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000787  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e1  00000000  00000000  00000a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a0  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000013a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000021  00000000  00000000  0000179f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_read>:
float adc_val=0;


// function to read ADC
uint16_t adc_read(uint8_t adc_channel){
	ADMUX |= adc_channel;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	90 81       	ld	r25, Z
  96:	89 2b       	or	r24, r25
  98:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC));
  a4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  a8:	86 fd       	sbrc	r24, 6
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <adc_read+0x14>
	return ADC;
  ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  b4:	08 95       	ret

000000b6 <adc_init>:


// function to initialize ADC with prescalar = 64 & Vref = Vcc
void adc_init(void){
	
	ADMUX |= (1<<REFS0);
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADPS2) | (1<<ADPS1);
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	86 6c       	ori	r24, 0xC6	; 198
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <main>:
}


int main(void)
{
    adc_init();
  cc:	0e 94 5b 00 	call	0xb6	; 0xb6 <adc_init>
    while (1) 
    {
		adc_val = adc_read(0);
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 48 00 	call	0x90	; 0x90 <adc_read>
  d6:	bc 01       	movw	r22, r24
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 82 00 	call	0x104	; 0x104 <__floatunsisf>
  e0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  ec:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	83 ec       	ldi	r24, 0xC3	; 195
  f4:	99 e0       	ldi	r25, 0x09	; 9
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x2a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x34>
 100:	00 00       	nop
 102:	e6 cf       	rjmp	.-52     	; 0xd0 <main+0x4>

00000104 <__floatunsisf>:
 104:	e8 94       	clt
 106:	09 c0       	rjmp	.+18     	; 0x11a <__floatsisf+0x12>

00000108 <__floatsisf>:
 108:	97 fb       	bst	r25, 7
 10a:	3e f4       	brtc	.+14     	; 0x11a <__floatsisf+0x12>
 10c:	90 95       	com	r25
 10e:	80 95       	com	r24
 110:	70 95       	com	r23
 112:	61 95       	neg	r22
 114:	7f 4f       	sbci	r23, 0xFF	; 255
 116:	8f 4f       	sbci	r24, 0xFF	; 255
 118:	9f 4f       	sbci	r25, 0xFF	; 255
 11a:	99 23       	and	r25, r25
 11c:	a9 f0       	breq	.+42     	; 0x148 <__floatsisf+0x40>
 11e:	f9 2f       	mov	r31, r25
 120:	96 e9       	ldi	r25, 0x96	; 150
 122:	bb 27       	eor	r27, r27
 124:	93 95       	inc	r25
 126:	f6 95       	lsr	r31
 128:	87 95       	ror	r24
 12a:	77 95       	ror	r23
 12c:	67 95       	ror	r22
 12e:	b7 95       	ror	r27
 130:	f1 11       	cpse	r31, r1
 132:	f8 cf       	rjmp	.-16     	; 0x124 <__floatsisf+0x1c>
 134:	fa f4       	brpl	.+62     	; 0x174 <__floatsisf+0x6c>
 136:	bb 0f       	add	r27, r27
 138:	11 f4       	brne	.+4      	; 0x13e <__floatsisf+0x36>
 13a:	60 ff       	sbrs	r22, 0
 13c:	1b c0       	rjmp	.+54     	; 0x174 <__floatsisf+0x6c>
 13e:	6f 5f       	subi	r22, 0xFF	; 255
 140:	7f 4f       	sbci	r23, 0xFF	; 255
 142:	8f 4f       	sbci	r24, 0xFF	; 255
 144:	9f 4f       	sbci	r25, 0xFF	; 255
 146:	16 c0       	rjmp	.+44     	; 0x174 <__floatsisf+0x6c>
 148:	88 23       	and	r24, r24
 14a:	11 f0       	breq	.+4      	; 0x150 <__floatsisf+0x48>
 14c:	96 e9       	ldi	r25, 0x96	; 150
 14e:	11 c0       	rjmp	.+34     	; 0x172 <__floatsisf+0x6a>
 150:	77 23       	and	r23, r23
 152:	21 f0       	breq	.+8      	; 0x15c <__floatsisf+0x54>
 154:	9e e8       	ldi	r25, 0x8E	; 142
 156:	87 2f       	mov	r24, r23
 158:	76 2f       	mov	r23, r22
 15a:	05 c0       	rjmp	.+10     	; 0x166 <__floatsisf+0x5e>
 15c:	66 23       	and	r22, r22
 15e:	71 f0       	breq	.+28     	; 0x17c <__floatsisf+0x74>
 160:	96 e8       	ldi	r25, 0x86	; 134
 162:	86 2f       	mov	r24, r22
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	2a f0       	brmi	.+10     	; 0x174 <__floatsisf+0x6c>
 16a:	9a 95       	dec	r25
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	88 1f       	adc	r24, r24
 172:	da f7       	brpl	.-10     	; 0x16a <__floatsisf+0x62>
 174:	88 0f       	add	r24, r24
 176:	96 95       	lsr	r25
 178:	87 95       	ror	r24
 17a:	97 f9       	bld	r25, 7
 17c:	08 95       	ret

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
